(ns lein-android.test.create
  (:use lein-android.create :reload)
  (:use [clojure.contrib.str-utils :only (re-gsub re-split)])
  (:use [clojure.test]))

(def test-options {:package "my.package.name" :activity "MyActivityName" :path "folder" :target "android-9" :project "my-project-name"})

(deftest src-file-test
  (testing "src-file"
    (testing "should produce an appropriate android hello-world program in clojure"
      (is (= (src-file test-options)
             "(ns my.package.name\n  (:use clj-android))\n\n(defactivity MyActivityName\n  (:create\n    (content-view [TextView {:text \"Hello World!\"}])))")))))

(deftest default-properties-test
  (testing "default-properties"
    (testing "should produce a default.properties file that sets the project target"
      (is (= "# This file is automatically generated by Android Tools.\n# Do not modify this file -- YOUR CHANGES WILL BE ERASED!\n#\n# This file must be checked in Version Control Systems.\n#\n# To customize properties used by the Ant build system use,\n# \"build.properties\", and override values to adapt the script to your\n# project structure.\n\n# Project target.\ntarget=android-9"
             (default-properties test-options))))))

(deftest local-properties-test
  (testing "local-properties"
    (testing "should produce a local.properties file that sets the android-sdk location"
      (is (= (str "# This file is automatically generated by Android Tools.\n# Do not modify this file -- YOUR CHANGES WILL BE ERASED!\n#\n# This file must be checked in Version Control Systems.\n#\n# To customize properties used by the Ant build system use,\n# \"build.properties\", and override values to adapt the script to your\n# project structure.\n\n# Android SDK location.\nsdk.dir=" (System/getenv "ANDROID_SDK_HOME"))
             (local-properties))))))

(deftest strings-xml-test
  (testing "strings-xml"
    (testing "should produce a string for generating the string resources xml file"
      (is (= "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n  <string name=\"app_name\">MyActivityName</string>\n</resources>" 
             (strings-xml test-options))))))

(defn same-as-sample?
  [string file-name]
  (= (re-split #"\n" (slurp (re-gsub #"/\w+\.clj" (str "/" file-name) *file*)))
     (re-split #"\n" string)))

(deftest build-xml-test
  (testing "build-xml"
    (testing "should produce an xml string for the build.xml file"
      (is (same-as-sample? (build-xml test-options)
                           "sample-build.xml")))))

(deftest manifest-test
  (testing "manifest"
    (testing "should produce an xml string for the AndroidManifest.xml file"
      (is (same-as-sample? (manifest test-options)
                           "sample-manifest.xml")))))

(deftest lein-file-test
  (testing "lein-file"
    (testing "should produce a suitable leiningen project.clj string"
      (is (same-as-sample? (lein-file test-options)
                           "sample-project.clj")))))

(deftest build-properties-test
  (testing "build-properties"
    (testing "should produce a suitable build.properties string"
       (is (same-as-sample? (build-properties)
                            "sample-build.properties")))))

(deftest validate-test
  (testing "validate"
    (testing "should raise an error if invalid options are supplied"
      (is (thrown-with-msg? Exception #"Either activity or project must be specified" (validate (dissoc test-options :project :activity))))
      (is (thrown-with-msg? Exception #"Package must be specified" (validate (dissoc test-options :package))))
      (is (thrown-with-msg? Exception #"Activity must be a valid java classname" (validate (assoc test-options :activity "my invalid activity"))))
      (is (thrown-with-msg? Exception #"Activity must start with a capital letter" (validate (assoc test-options :activity "myInvalidActivity"))))
      (is (thrown-with-msg? Exception #"Project must be a valid clojure symbol" (validate (assoc test-options :project "my invalid project"))))
      (is (thrown-with-msg? Exception #"Package must contain only alphanumeric, dot and underscore characters" (validate (assoc test-options :package "an-invalid.package.name"))))
      (is (let [options (assoc test-options :path :target :activity)] (= options (validate options))))
      (is (thrown-with-msg? Exception #"Invalid target. Try 'android-9'" (validate (assoc test-options :target "3")))))))

(deftest defaults-test
  (testing "apply-defaults"
    (testing "should appply sensible defaults wherever possible"
      (is (let [options (dissoc test-options :target)] (= (apply-defaults options) (assoc options :target "android-9"))))
      (is (let [options (dissoc test-options :project)] (= (apply-defaults options) (assoc options :project "my-activity-name"))))
      (is (let [options (dissoc test-options :activity)] (= (apply-defaults options) (assoc options :activity "MyProjectName")))) 
      (is (let [options (dissoc test-options :path)] (= (apply-defaults options) (assoc test-options :path "my_project_name"))))
      (is (let [options {:project "my-awesome-app" :package "org.awesome"}]
            (= (assoc options :path "my_awesome_app" :activity "MyAwesomeApp" :target "android-9")
               (apply-defaults options))))
      (is (let [options {:activity "MyAwesomeApp" :package "org.awesome"}]
            (= (assoc options :path "my_awesome_app" :project "my-awesome-app" :target "android-9")
               (apply-defaults options)))))))


(run-tests)
